var fs = require('fs');
var path = require('path');

var webpack = require('webpack');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var SaveAssetsJson = require('assets-webpack-plugin');


var OUT_DIR = path.join(__dirname, 'built');

var extractCss = new ExtractTextPlugin(
        'extract-[contenthash].[name]', {allChunks: true});

var BABEL_LOADER, FILE_LOADER;

function getNodeExternals() {
    var externals = {};
    fs.readdirSync(path.join(__dirname, 'node_modules'))
        .forEach(function(mod) {
            externals[mod] = 'commonjs ' + mod;
        });
    return externals;
}

module.exports = [{
    name: 'Web Assets',
    context: __dirname,
    entry: {
        js: './src/scripts/init.js',
        css: './src/stylesheets/player.css'
    },
    devtool: 'source-map',
    output: {
        path: OUT_DIR,
        filename: 'chunk-[chunkhash].[name]'
    },
    resolve: {
        modulesDirectories: ['node_modules', 'bower_components'],
        root: [
            path.join(__dirname, 'src/lib')
        ],
        alias: {
            'openseadragon':
                'openseadragon/built-openseadragon/openseadragon/openseadragon'
        }
    },
    module: {
        loaders: [
            // Shim openseadragon as a commonjs module
            {
                test: /\/openseadragon\.js$/,
                include: path.resolve(__dirname,
                                      'bower_components/openseadragon'),
                loader: 'exports?OpenSeadragon'
            },
            // Shim modernizr as a commonjs module
            {
                test: /\/modernizr\.custom(\.js)?$/,
                include: path.resolve(__dirname, 'src/lib'),
                loader: 'imports?this=>global!exports?Modernizr'
            },
            // Transform CSS files with PostCSS
            {
                test: /\.css$/,
                include: path.resolve(__dirname, 'src/stylesheets'),
                loader: extractCss.extract(
                    'style-loader',
                    'css-loader?sourceMap!postcss-loader?sourceMap')
            },
            // Hash image files
            FILE_LOADER = {
                test: /\.(png|jpg|gif|woff2?|eot|ttf|svg)(\?.*)?$/,
                loader: 'file?name=[name]-[hash].[ext]'
            },
            // Use Babel for new js feature support
            BABEL_LOADER = {
                test: /\.js$/,
                include: path.resolve(__dirname, 'src'),
                exclude: path.resolve(__dirname, 'src/lib'),
                loader: require.resolve('babel-loader')
            }
        ]
    },

    // The css generated from the less gets run through these postcss filters
    postcss: [require('autoprefixer')],

    plugins: [
        // Extract the CSS text from the css-containing js modules that get
        // generated by default.
        extractCss,

        // Create a JSON file mapping entry points to hashed filenames so
        // that we can reference the hashed filenames of entry point chunks.
        new SaveAssetsJson({
            path: OUT_DIR,
            filename: 'webpack-build.json'
        })
    ]
},
// Build for the HTML generator
{
    name: 'Bootstrap HTML Renderer',
    target: 'node',
    context: __dirname,
    devtool: 'source-map',
    output: {
        path: OUT_DIR,
        filename: '[name]',
        publicPath: ''
    },
    node: {
        __dirname: true
    },
    entry: {
        'generate-html.js': './src/generate-html.js'
    },
    module: {
        loaders: [
            FILE_LOADER,
            BABEL_LOADER,
            {
                test: /\.jade$/,
                loader: 'jade-loader'
            }
        ]
    },
    externals: getNodeExternals(),
    plugins: [
        // Insert source map support in the compiled entry chunk
        new webpack.BannerPlugin(
            'require("source-map-support").install();',
            { raw: true, entryOnly: false })
    ]
}];
